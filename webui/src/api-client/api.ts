/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * 
     * @type {number}
     * @memberof CurrentUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    account_name: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface McsExposure
 */
export interface McsExposure {
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    frame_id: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    exptime?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    altitude?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    azimuth?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    insrot?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    adc_pa?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_cover_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_m1_temperature?: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposure
     */
    taken_at: string;
}
/**
 * 
 * @export
 * @interface McsVisit
 */
export interface McsVisit {
    /**
     * 
     * @type {Array<McsExposure>}
     * @memberof McsVisit
     */
    exposures: Array<McsExposure>;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {CurrentUser}
     * @memberof Session
     */
    current_user: CurrentUser;
}
/**
 * 
 * @export
 * @interface SessionCreateRequest
 */
export interface SessionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface SpsExposure
 */
export interface SpsExposure {
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    camera_id: number;
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    exptime: number;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_start: string;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_end: string;
}
/**
 * 
 * @export
 * @interface SpsSequence
 */
export interface SpsSequence {
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    sequence_type?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    cmd_str?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface SpsVisit
 */
export interface SpsVisit {
    /**
     * 
     * @type {string}
     * @memberof SpsVisit
     */
    exp_type: string;
    /**
     * 
     * @type {Array<SpsExposure>}
     * @memberof SpsVisit
     */
    exposures: Array<SpsExposure>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * 
 * @export
 * @interface VisitDetail
 */
export interface VisitDetail {
    /**
     * 
     * @type {number}
     * @memberof VisitDetail
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitDetail
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitDetail
     */
    issued_at?: string;
    /**
     * 
     * @type {Array<VisitNote>}
     * @memberof VisitDetail
     */
    notes: Array<VisitNote>;
    /**
     * 
     * @type {SpsVisit}
     * @memberof VisitDetail
     */
    sps?: SpsVisit;
    /**
     * 
     * @type {McsVisit}
     * @memberof VisitDetail
     */
    mcs?: McsVisit;
    /**
     * 
     * @type {VisitSet}
     * @memberof VisitDetail
     */
    visit_set?: VisitSet;
}
/**
 * 
 * @export
 * @interface VisitList
 */
export interface VisitList {
    /**
     * 
     * @type {Array<VisitListEntry>}
     * @memberof VisitList
     */
    visits: Array<VisitListEntry>;
}
/**
 * 
 * @export
 * @interface VisitListEntry
 */
export interface VisitListEntry {
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitListEntry
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitListEntry
     */
    issued_at?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VisitListEntry
     */
    sps_present: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VisitListEntry
     */
    mcs_present: boolean;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    visit_set_id?: number;
}
/**
 * 
 * @export
 * @interface VisitNote
 */
export interface VisitNote {
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    user_id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    pfs_visit_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitNote
     */
    body: string;
}
/**
 * 
 * @export
 * @interface VisitSet
 */
export interface VisitSet {
    /**
     * 
     * @type {number}
     * @memberof VisitSet
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitSet
     */
    visit_id: number;
    /**
     * 
     * @type {SpsSequence}
     * @memberof VisitSet
     */
    sps_sequence: SpsSequence;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate: async (sessionCreateRequest: SessionCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionCreateRequest' is not null or undefined
            assertParamExists('sessionCreate', 'sessionCreateRequest', sessionCreateRequest)
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDestroy: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionShow: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitDetail: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visitDetail', 'id', id)
            const localVarPath = `/api/visits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit List
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitList: async (offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/visists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionCreate(sessionCreateRequest: SessionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionCreate(sessionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Session Destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionDestroy(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionDestroy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Session Show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionShow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionShow(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitDetail(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitDetail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit List
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitList(offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitList(offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<any> {
            return localVarFp.index(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate(sessionCreateRequest: SessionCreateRequest, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionCreate(sessionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDestroy(options?: any): AxiosPromise<any> {
            return localVarFp.sessionDestroy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionShow(options?: any): AxiosPromise<Session> {
            return localVarFp.sessionShow(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitDetail(id: number, options?: any): AxiosPromise<VisitDetail> {
            return localVarFp.visitDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit List
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitList(offset?: number, options?: any): AxiosPromise<VisitList> {
            return localVarFp.visitList(offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public index(options?: any) {
        return DefaultApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Create
     * @param {SessionCreateRequest} sessionCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionCreate(sessionCreateRequest: SessionCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).sessionCreate(sessionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Destroy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionDestroy(options?: any) {
        return DefaultApiFp(this.configuration).sessionDestroy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Show
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionShow(options?: any) {
        return DefaultApiFp(this.configuration).sessionShow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Detail
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitDetail(id: number, options?: any) {
        return DefaultApiFp(this.configuration).visitDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit List
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitList(offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).visitList(offset, options).then((request) => request(this.axios, this.basePath));
    }
}


