/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AgcExposure
 */
export interface AgcExposure {
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    exptime?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    altitude?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    azimuth?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    insrot?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    adc_pa?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    m2_pos3?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    outside_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    outside_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcExposure
     */
    outside_humidity?: number;
    /**
     * 
     * @type {string}
     * @memberof AgcExposure
     */
    measurement_algorithm?: string;
    /**
     * 
     * @type {string}
     * @memberof AgcExposure
     */
    version_actor?: string;
    /**
     * 
     * @type {string}
     * @memberof AgcExposure
     */
    version_instdata?: string;
    /**
     * 
     * @type {string}
     * @memberof AgcExposure
     */
    taken_at?: string;
    /**
     * 
     * @type {AgcGuideOffset}
     * @memberof AgcExposure
     */
    guide_offset?: AgcGuideOffset;
}
/**
 * 
 * @export
 * @interface AgcGuideOffset
 */
export interface AgcGuideOffset {
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    ra?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    dec?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    pa?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_ra?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_dec?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_insrot?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_az?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_el?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_z?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_z1?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_z2?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_z3?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_z4?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_z5?: number;
    /**
     * 
     * @type {number}
     * @memberof AgcGuideOffset
     */
    delta_z6?: number;
}
/**
 * 
 * @export
 * @interface AgcVisit
 */
export interface AgcVisit {
    /**
     * 
     * @type {AgcExposure}
     * @memberof AgcVisit
     */
    exposure?: AgcExposure;
}
/**
 * 
 * @export
 * @interface AttachmentEntry
 */
export interface AttachmentEntry {
    /**
     * 
     * @type {number}
     * @memberof AttachmentEntry
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AttachmentEntry
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentEntry
     */
    account_name: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentEntry
     */
    media_type: string;
    /**
     * 
     * @type {boolean}
     * @memberof AttachmentEntry
     */
    exists: boolean;
}
/**
 * 
 * @export
 * @interface AttachmentList
 */
export interface AttachmentList {
    /**
     * 
     * @type {number}
     * @memberof AttachmentList
     */
    count: number;
    /**
     * 
     * @type {Array<AttachmentEntry>}
     * @memberof AttachmentList
     */
    entries: Array<AttachmentEntry>;
}
/**
 * 
 * @export
 * @interface CreateAttachmentResponse
 */
export interface CreateAttachmentResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateAttachmentResponse
     */
    path: string;
}
/**
 * 
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * 
     * @type {number}
     * @memberof CurrentUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    account_name: string;
}
/**
 * 
 * @export
 * @interface FitsHdu
 */
export interface FitsHdu {
    /**
     * 
     * @type {number}
     * @memberof FitsHdu
     */
    index: number;
    /**
     * 
     * @type {FitsHeader}
     * @memberof FitsHdu
     */
    header: FitsHeader;
}
/**
 * 
 * @export
 * @interface FitsHeader
 */
export interface FitsHeader {
    /**
     * 
     * @type {Array<any>}
     * @memberof FitsHeader
     */
    cards: Array<any>;
}
/**
 * 
 * @export
 * @interface FitsMeta
 */
export interface FitsMeta {
    /**
     * 
     * @type {string}
     * @memberof FitsMeta
     */
    frameid: string;
    /**
     * 
     * @type {Array<FitsHdu>}
     * @memberof FitsMeta
     */
    hdul: Array<FitsHdu>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum FitsType {
    Raw = 'raw',
    Calexp = 'calexp'
}

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface IicSequence
 */
export interface IicSequence {
    /**
     * 
     * @type {number}
     * @memberof IicSequence
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof IicSequence
     */
    sequence_type?: string;
    /**
     * 
     * @type {string}
     * @memberof IicSequence
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IicSequence
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof IicSequence
     */
    cmd_str?: string;
    /**
     * 
     * @type {IicSequenceStatus}
     * @memberof IicSequence
     */
    status?: IicSequenceStatus;
    /**
     * 
     * @type {Array<VisitSetNote>}
     * @memberof IicSequence
     */
    notes: Array<VisitSetNote>;
}
/**
 * 
 * @export
 * @interface IicSequenceStatus
 */
export interface IicSequenceStatus {
    /**
     * 
     * @type {number}
     * @memberof IicSequenceStatus
     */
    visit_set_id: number;
    /**
     * 
     * @type {number}
     * @memberof IicSequenceStatus
     */
    status_flag?: number;
    /**
     * 
     * @type {string}
     * @memberof IicSequenceStatus
     */
    cmd_output?: string;
}
/**
 * 
 * @export
 * @interface McsExposure
 */
export interface McsExposure {
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    frame_id: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    exptime?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    altitude?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    azimuth?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    insrot?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    adc_pa?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_cover_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_m1_temperature?: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposure
     */
    taken_at: string;
    /**
     * 
     * @type {Array<McsExposureNote>}
     * @memberof McsExposure
     */
    notes: Array<McsExposureNote>;
}
/**
 * 
 * @export
 * @interface McsExposureNote
 */
export interface McsExposureNote {
    /**
     * 
     * @type {number}
     * @memberof McsExposureNote
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposureNote
     */
    body: string;
    /**
     * 
     * @type {ObslogUser}
     * @memberof McsExposureNote
     */
    user: ObslogUser;
}
/**
 * 
 * @export
 * @interface McsExposureNoteCreateRequest
 */
export interface McsExposureNoteCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof McsExposureNoteCreateRequest
     */
    mcs_exposure_frame_id: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposureNoteCreateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface McsExposureNoteCreateResponse
 */
export interface McsExposureNoteCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof McsExposureNoteCreateResponse
     */
    id: number;
}
/**
 * 
 * @export
 * @interface McsVisit
 */
export interface McsVisit {
    /**
     * 
     * @type {Array<McsExposure>}
     * @memberof McsVisit
     */
    exposures: Array<McsExposure>;
}
/**
 * 
 * @export
 * @interface ObslogUser
 */
export interface ObslogUser {
    /**
     * 
     * @type {number}
     * @memberof ObslogUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ObslogUser
     */
    account_name: string;
}
/**
 * 
 * @export
 * @interface PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest
 */
export interface PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest
 */
export interface PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {CurrentUser}
     * @memberof Session
     */
    current_user: CurrentUser;
}
/**
 * 
 * @export
 * @interface SessionCreateRequest
 */
export interface SessionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface SpsAnnotation
 */
export interface SpsAnnotation {
    /**
     * 
     * @type {number}
     * @memberof SpsAnnotation
     */
    data_flag: number;
    /**
     * 
     * @type {string}
     * @memberof SpsAnnotation
     */
    notes: string;
    /**
     * 
     * @type {number}
     * @memberof SpsAnnotation
     */
    annotation_id: number;
    /**
     * 
     * @type {string}
     * @memberof SpsAnnotation
     */
    created_at?: string;
}
/**
 * 
 * @export
 * @interface SpsExposure
 */
export interface SpsExposure {
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    camera_id: number;
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    exptime: number;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_start: string;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_end: string;
    /**
     * 
     * @type {Array<SpsAnnotation>}
     * @memberof SpsExposure
     */
    annotation: Array<SpsAnnotation>;
}
/**
 * 
 * @export
 * @interface SpsSequenceDetail
 */
export interface SpsSequenceDetail {
    /**
     * 
     * @type {number}
     * @memberof SpsSequenceDetail
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    sequence_type?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    cmd_str?: string;
    /**
     * 
     * @type {IicSequenceStatus}
     * @memberof SpsSequenceDetail
     */
    status?: IicSequenceStatus;
    /**
     * 
     * @type {Array<VisitSetNote>}
     * @memberof SpsSequenceDetail
     */
    notes: Array<VisitSetNote>;
}
/**
 * 
 * @export
 * @interface SpsVisit
 */
export interface SpsVisit {
    /**
     * 
     * @type {string}
     * @memberof SpsVisit
     */
    exp_type: string;
    /**
     * 
     * @type {Array<SpsExposure>}
     * @memberof SpsVisit
     */
    exposures: Array<SpsExposure>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum ThemeName {
    Light = 'light',
    Dark = 'dark'
}

/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * 
 * @export
 * @interface VisitDetail
 */
export interface VisitDetail {
    /**
     * 
     * @type {number}
     * @memberof VisitDetail
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitDetail
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitDetail
     */
    issued_at?: string;
    /**
     * 
     * @type {Array<VisitNote>}
     * @memberof VisitDetail
     */
    notes: Array<VisitNote>;
    /**
     * 
     * @type {SpsVisit}
     * @memberof VisitDetail
     */
    sps?: SpsVisit;
    /**
     * 
     * @type {McsVisit}
     * @memberof VisitDetail
     */
    mcs?: McsVisit;
    /**
     * 
     * @type {AgcVisit}
     * @memberof VisitDetail
     */
    agc?: AgcVisit;
    /**
     * 
     * @type {SpsSequenceDetail}
     * @memberof VisitDetail
     */
    sps_sequence?: SpsSequenceDetail;
}
/**
 * 
 * @export
 * @interface VisitList
 */
export interface VisitList {
    /**
     * 
     * @type {Array<VisitListEntry>}
     * @memberof VisitList
     */
    visits: Array<VisitListEntry>;
    /**
     * 
     * @type {Array<VisitSet>}
     * @memberof VisitList
     */
    visit_sets: Array<VisitSet>;
    /**
     * 
     * @type {number}
     * @memberof VisitList
     */
    count: number;
}
/**
 * 
 * @export
 * @interface VisitListEntry
 */
export interface VisitListEntry {
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitListEntry
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitListEntry
     */
    issued_at?: string;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    visit_set_id?: number;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    n_sps_exposures: number;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    n_mcs_exposures: number;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    n_agc_exposures: number;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    avg_exptime?: number;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    avg_azimuth?: number;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    avg_altitude?: number;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    avg_insrot?: number;
    /**
     * 
     * @type {Array<VisitNote>}
     * @memberof VisitListEntry
     */
    notes: Array<VisitNote>;
}
/**
 * 
 * @export
 * @interface VisitNote
 */
export interface VisitNote {
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    user_id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    pfs_visit_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitNote
     */
    body: string;
    /**
     * 
     * @type {ObslogUser}
     * @memberof VisitNote
     */
    user: ObslogUser;
}
/**
 * 
 * @export
 * @interface VisitNoteCreateRequest
 */
export interface VisitNoteCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof VisitNoteCreateRequest
     */
    visit_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitNoteCreateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface VisitNoteCreateResponse
 */
export interface VisitNoteCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof VisitNoteCreateResponse
     */
    id: number;
}
/**
 * 
 * @export
 * @interface VisitSet
 */
export interface VisitSet {
    /**
     * 
     * @type {number}
     * @memberof VisitSet
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitSet
     */
    visit_id: number;
    /**
     * 
     * @type {IicSequence}
     * @memberof VisitSet
     */
    sps_sequence: IicSequence;
}
/**
 * 
 * @export
 * @interface VisitSetNote
 */
export interface VisitSetNote {
    /**
     * 
     * @type {number}
     * @memberof VisitSetNote
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitSetNote
     */
    user_id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitSetNote
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitSetNote
     */
    body: string;
    /**
     * 
     * @type {ObslogUser}
     * @memberof VisitSetNote
     */
    user: ObslogUser;
}
/**
 * 
 * @export
 * @interface VisitSetNoteCreateRequest
 */
export interface VisitSetNoteCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof VisitSetNoteCreateRequest
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitSetNoteCreateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface VisitSetNoteCreateResponse
 */
export interface VisitSetNoteCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof VisitSetNoteCreateResponse
     */
    id: number;
}
/**
 * 
 * @export
 * @interface VisitSetNoteUpdateRequest
 */
export interface VisitSetNoteUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof VisitSetNoteUpdateRequest
     */
    body: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Attachment
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachment: async (file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createAttachment', 'file', file)
            const localVarPath = `/api/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Mcs Exposure Note
         * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMcsExposureNote: async (mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mcsExposureNoteCreateRequest' is not null or undefined
            assertParamExists('createMcsExposureNote', 'mcsExposureNoteCreateRequest', mcsExposureNoteCreateRequest)
            const localVarPath = `/api/mcs_exposure_notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mcsExposureNoteCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Session
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (sessionCreateRequest: SessionCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionCreateRequest' is not null or undefined
            assertParamExists('createSession', 'sessionCreateRequest', sessionCreateRequest)
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Visit Note
         * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitNote: async (visitNoteCreateRequest: VisitNoteCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitNoteCreateRequest' is not null or undefined
            assertParamExists('createVisitNote', 'visitNoteCreateRequest', visitNoteCreateRequest)
            const localVarPath = `/api/visit_notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitNoteCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Visit Set Note
         * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitSetNote: async (visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitSetNoteCreateRequest' is not null or undefined
            assertParamExists('createVisitSetNote', 'visitSetNoteCreateRequest', visitSetNoteCreateRequest)
            const localVarPath = `/api/visit_set_notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitSetNoteCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Destroy Attachment
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAttachment: async (fileId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('destroyAttachment', 'fileId', fileId)
            const localVarPath = `/api/attachments/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Destroy Mcs Exposure Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyMcsExposureNote: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyMcsExposureNote', 'id', id)
            const localVarPath = `/api/mcs_exposure_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Destroy Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroySession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Destroy Visit Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyVisitNote: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyVisitNote', 'id', id)
            const localVarPath = `/api/visit_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Destroy Visit Set Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyVisitSetNote: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyVisitSetNote', 'id', id)
            const localVarPath = `/api/visit_set_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Healthz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthz: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/healthz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Attachment
         * @param {number} [start] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachment: async (start?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Fits Meta
         * @param {number} visitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFitsMeta: async (visitId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('listFitsMeta', 'visitId', visitId)
            const localVarPath = `/api/fits/{visit_id}`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Visit
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVisit: async (offset?: number, limit?: number, sql?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/visits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sql !== undefined) {
                localVarQueryParameter['sql'] = sql;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Visit Csv
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVisitCsv: async (sql?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/visits.csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sql !== undefined) {
                localVarQueryParameter['sql'] = sql;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Agc Data Chart
         * @param {number} visitId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {ThemeName} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAgcDataChart: async (visitId: number, width?: number, height?: number, theme?: ThemeName, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('showAgcDataChart', 'visitId', visitId)
            const localVarPath = `/api/agc_data/{visit_id}.png`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Agc Fits Preview
         * @param {number} visitId 
         * @param {number} frameId 
         * @param {number} hduIndex 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAgcFitsPreview: async (visitId: number, frameId: number, hduIndex: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('showAgcFitsPreview', 'visitId', visitId)
            // verify required parameter 'frameId' is not null or undefined
            assertParamExists('showAgcFitsPreview', 'frameId', frameId)
            // verify required parameter 'hduIndex' is not null or undefined
            assertParamExists('showAgcFitsPreview', 'hduIndex', hduIndex)
            const localVarPath = `/api/fits/visits/{visit_id}/agc/{frame_id}-{hdu_index}.png`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"frame_id"}}`, encodeURIComponent(String(frameId)))
                .replace(`{${"hdu_index"}}`, encodeURIComponent(String(hduIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Attachment
         * @param {string} accountName 
         * @param {number} fileId 
         * @param {string} [filename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAttachment: async (accountName: string, fileId: number, filename?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            assertParamExists('showAttachment', 'accountName', accountName)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('showAttachment', 'fileId', fileId)
            const localVarPath = `/api/attachments/{account_name}/{file_id}`
                .replace(`{${"account_name"}}`, encodeURIComponent(String(accountName)))
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Fits By Frame Id
         * @param {number} visitId 
         * @param {string} frameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFitsByFrameId: async (visitId: number, frameId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('showFitsByFrameId', 'visitId', visitId)
            // verify required parameter 'frameId' is not null or undefined
            assertParamExists('showFitsByFrameId', 'frameId', frameId)
            const localVarPath = `/api/fits/visits/{visit_id}/frames/{frame_id}.fits`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"frame_id"}}`, encodeURIComponent(String(frameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Mcs Data Chart
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {ThemeName} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMcsDataChart: async (frameId: number, width?: number, height?: number, theme?: ThemeName, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameId' is not null or undefined
            assertParamExists('showMcsDataChart', 'frameId', frameId)
            const localVarPath = `/api/mcs_data/{frame_id}.png`
                .replace(`{${"frame_id"}}`, encodeURIComponent(String(frameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Mcs Fits
         * @param {number} visitId 
         * @param {string} frameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMcsFits: async (visitId: number, frameId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('showMcsFits', 'visitId', visitId)
            // verify required parameter 'frameId' is not null or undefined
            assertParamExists('showMcsFits', 'frameId', frameId)
            const localVarPath = `/api/fits/visits/{visit_id}/mcs/{frame_id}.fits`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"frame_id"}}`, encodeURIComponent(String(frameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Mcs Fits Preview
         * @param {number} visitId 
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMcsFitsPreview: async (visitId: number, frameId: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('showMcsFitsPreview', 'visitId', visitId)
            // verify required parameter 'frameId' is not null or undefined
            assertParamExists('showMcsFitsPreview', 'frameId', frameId)
            const localVarPath = `/api/fits/visits/{visit_id}/mcs/{frame_id}.png`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"frame_id"}}`, encodeURIComponent(String(frameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Sps Fits
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {FitsType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSpsFits: async (visitId: number, cameraId: number, type?: FitsType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('showSpsFits', 'visitId', visitId)
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('showSpsFits', 'cameraId', cameraId)
            const localVarPath = `/api/fits/visits/{visit_id}/sps/{camera_id}.fits`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Sps Fits Preview
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {FitsType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSpsFitsPreview: async (visitId: number, cameraId: number, width?: number, height?: number, type?: FitsType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('showSpsFitsPreview', 'visitId', visitId)
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('showSpsFitsPreview', 'cameraId', cameraId)
            const localVarPath = `/api/fits/visits/{visit_id}/sps/{camera_id}.png`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Visit
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVisit: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showVisit', 'id', id)
            const localVarPath = `/api/visits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Mcs Exposure Note
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMcsExposureNote: async (id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMcsExposureNote', 'id', id)
            // verify required parameter 'pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest' is not null or undefined
            assertParamExists('updateMcsExposureNote', 'pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest', pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest)
            const localVarPath = `/api/mcs_exposure_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Visit Note
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisitNote: async (id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVisitNote', 'id', id)
            // verify required parameter 'pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest' is not null or undefined
            assertParamExists('updateVisitNote', 'pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest', pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest)
            const localVarPath = `/api/visit_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Visit Set Note
         * @param {number} id 
         * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisitSetNote: async (id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVisitSetNote', 'id', id)
            // verify required parameter 'visitSetNoteUpdateRequest' is not null or undefined
            assertParamExists('updateVisitSetNote', 'visitSetNoteUpdateRequest', visitSetNoteUpdateRequest)
            const localVarPath = `/api/visit_set_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitSetNoteUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Attachment
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttachment(file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAttachmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttachment(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Mcs Exposure Note
         * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMcsExposureNote(mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<McsExposureNoteCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMcsExposureNote(mcsExposureNoteCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Session
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(sessionCreateRequest: SessionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(sessionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Visit Note
         * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVisitNote(visitNoteCreateRequest: VisitNoteCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitNoteCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVisitNote(visitNoteCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Visit Set Note
         * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVisitSetNote(visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitSetNoteCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVisitSetNote(visitSetNoteCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Destroy Attachment
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyAttachment(fileId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyAttachment(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Destroy Mcs Exposure Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyMcsExposureNote(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyMcsExposureNote(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Destroy Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroySession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroySession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Destroy Visit Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyVisitNote(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyVisitNote(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Destroy Visit Set Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyVisitSetNote(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyVisitSetNote(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Healthz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthz(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthz(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Attachment
         * @param {number} [start] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttachment(start?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttachment(start, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Fits Meta
         * @param {number} visitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFitsMeta(visitId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FitsMeta>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFitsMeta(visitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Visit
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVisit(offset?: number, limit?: number, sql?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVisit(offset, limit, sql, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Visit Csv
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVisitCsv(sql?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVisitCsv(sql, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Agc Data Chart
         * @param {number} visitId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {ThemeName} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showAgcDataChart(visitId: number, width?: number, height?: number, theme?: ThemeName, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showAgcDataChart(visitId, width, height, theme, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Agc Fits Preview
         * @param {number} visitId 
         * @param {number} frameId 
         * @param {number} hduIndex 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showAgcFitsPreview(visitId: number, frameId: number, hduIndex: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showAgcFitsPreview(visitId, frameId, hduIndex, width, height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Attachment
         * @param {string} accountName 
         * @param {number} fileId 
         * @param {string} [filename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showAttachment(accountName: string, fileId: number, filename?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showAttachment(accountName, fileId, filename, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Fits By Frame Id
         * @param {number} visitId 
         * @param {string} frameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showFitsByFrameId(visitId: number, frameId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showFitsByFrameId(visitId, frameId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Mcs Data Chart
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {ThemeName} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showMcsDataChart(frameId: number, width?: number, height?: number, theme?: ThemeName, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showMcsDataChart(frameId, width, height, theme, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Mcs Fits
         * @param {number} visitId 
         * @param {string} frameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showMcsFits(visitId: number, frameId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showMcsFits(visitId, frameId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Mcs Fits Preview
         * @param {number} visitId 
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showMcsFitsPreview(visitId: number, frameId: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showMcsFitsPreview(visitId, frameId, width, height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Sps Fits
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {FitsType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSpsFits(visitId: number, cameraId: number, type?: FitsType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSpsFits(visitId, cameraId, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Sps Fits Preview
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {FitsType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSpsFitsPreview(visitId: number, cameraId: number, width?: number, height?: number, type?: FitsType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSpsFitsPreview(visitId, cameraId, width, height, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Visit
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showVisit(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showVisit(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Mcs Exposure Note
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMcsExposureNote(id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMcsExposureNote(id, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Visit Note
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVisitNote(id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVisitNote(id, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Visit Set Note
         * @param {number} id 
         * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVisitSetNote(id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVisitSetNote(id, visitSetNoteUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Attachment
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachment(file: any, options?: any): AxiosPromise<CreateAttachmentResponse> {
            return localVarFp.createAttachment(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Mcs Exposure Note
         * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMcsExposureNote(mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options?: any): AxiosPromise<McsExposureNoteCreateResponse> {
            return localVarFp.createMcsExposureNote(mcsExposureNoteCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Session
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(sessionCreateRequest: SessionCreateRequest, options?: any): AxiosPromise<Session> {
            return localVarFp.createSession(sessionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Visit Note
         * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitNote(visitNoteCreateRequest: VisitNoteCreateRequest, options?: any): AxiosPromise<VisitNoteCreateResponse> {
            return localVarFp.createVisitNote(visitNoteCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Visit Set Note
         * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitSetNote(visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options?: any): AxiosPromise<VisitSetNoteCreateResponse> {
            return localVarFp.createVisitSetNote(visitSetNoteCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Destroy Attachment
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAttachment(fileId: number, options?: any): AxiosPromise<any> {
            return localVarFp.destroyAttachment(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Destroy Mcs Exposure Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyMcsExposureNote(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.destroyMcsExposureNote(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Destroy Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroySession(options?: any): AxiosPromise<any> {
            return localVarFp.destroySession(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Destroy Visit Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyVisitNote(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.destroyVisitNote(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Destroy Visit Set Note
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyVisitSetNote(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.destroyVisitSetNote(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Healthz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthz(options?: any): AxiosPromise<any> {
            return localVarFp.healthz(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<any> {
            return localVarFp.index(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Attachment
         * @param {number} [start] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachment(start?: number, perPage?: number, options?: any): AxiosPromise<AttachmentList> {
            return localVarFp.listAttachment(start, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Fits Meta
         * @param {number} visitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFitsMeta(visitId: number, options?: any): AxiosPromise<Array<FitsMeta>> {
            return localVarFp.listFitsMeta(visitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Visit
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVisit(offset?: number, limit?: number, sql?: string, options?: any): AxiosPromise<VisitList> {
            return localVarFp.listVisit(offset, limit, sql, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Visit Csv
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVisitCsv(sql?: string, options?: any): AxiosPromise<any> {
            return localVarFp.listVisitCsv(sql, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Agc Data Chart
         * @param {number} visitId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {ThemeName} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAgcDataChart(visitId: number, width?: number, height?: number, theme?: ThemeName, options?: any): AxiosPromise<any> {
            return localVarFp.showAgcDataChart(visitId, width, height, theme, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Agc Fits Preview
         * @param {number} visitId 
         * @param {number} frameId 
         * @param {number} hduIndex 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAgcFitsPreview(visitId: number, frameId: number, hduIndex: number, width?: number, height?: number, options?: any): AxiosPromise<any> {
            return localVarFp.showAgcFitsPreview(visitId, frameId, hduIndex, width, height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Attachment
         * @param {string} accountName 
         * @param {number} fileId 
         * @param {string} [filename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAttachment(accountName: string, fileId: number, filename?: string, options?: any): AxiosPromise<any> {
            return localVarFp.showAttachment(accountName, fileId, filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Fits By Frame Id
         * @param {number} visitId 
         * @param {string} frameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFitsByFrameId(visitId: number, frameId: string, options?: any): AxiosPromise<any> {
            return localVarFp.showFitsByFrameId(visitId, frameId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Mcs Data Chart
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {ThemeName} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMcsDataChart(frameId: number, width?: number, height?: number, theme?: ThemeName, options?: any): AxiosPromise<any> {
            return localVarFp.showMcsDataChart(frameId, width, height, theme, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Mcs Fits
         * @param {number} visitId 
         * @param {string} frameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMcsFits(visitId: number, frameId: string, options?: any): AxiosPromise<any> {
            return localVarFp.showMcsFits(visitId, frameId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Mcs Fits Preview
         * @param {number} visitId 
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMcsFitsPreview(visitId: number, frameId: number, width?: number, height?: number, options?: any): AxiosPromise<any> {
            return localVarFp.showMcsFitsPreview(visitId, frameId, width, height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSession(options?: any): AxiosPromise<Session> {
            return localVarFp.showSession(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Sps Fits
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {FitsType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSpsFits(visitId: number, cameraId: number, type?: FitsType, options?: any): AxiosPromise<any> {
            return localVarFp.showSpsFits(visitId, cameraId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Sps Fits Preview
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {FitsType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSpsFitsPreview(visitId: number, cameraId: number, width?: number, height?: number, type?: FitsType, options?: any): AxiosPromise<any> {
            return localVarFp.showSpsFitsPreview(visitId, cameraId, width, height, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Visit
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVisit(id: number, options?: any): AxiosPromise<VisitDetail> {
            return localVarFp.showVisit(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Mcs Exposure Note
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMcsExposureNote(id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.updateMcsExposureNote(id, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Visit Note
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisitNote(id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.updateVisitNote(id, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Visit Set Note
         * @param {number} id 
         * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisitSetNote(id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.updateVisitSetNote(id, visitSetNoteUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Attachment
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAttachment(file: any, options?: any) {
        return DefaultApiFp(this.configuration).createAttachment(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Mcs Exposure Note
     * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMcsExposureNote(mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).createMcsExposureNote(mcsExposureNoteCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Session
     * @param {SessionCreateRequest} sessionCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSession(sessionCreateRequest: SessionCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).createSession(sessionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Visit Note
     * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVisitNote(visitNoteCreateRequest: VisitNoteCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).createVisitNote(visitNoteCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Visit Set Note
     * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVisitSetNote(visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).createVisitSetNote(visitSetNoteCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Destroy Attachment
     * @param {number} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public destroyAttachment(fileId: number, options?: any) {
        return DefaultApiFp(this.configuration).destroyAttachment(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Destroy Mcs Exposure Note
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public destroyMcsExposureNote(id: number, options?: any) {
        return DefaultApiFp(this.configuration).destroyMcsExposureNote(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Destroy Session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public destroySession(options?: any) {
        return DefaultApiFp(this.configuration).destroySession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Destroy Visit Note
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public destroyVisitNote(id: number, options?: any) {
        return DefaultApiFp(this.configuration).destroyVisitNote(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Destroy Visit Set Note
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public destroyVisitSetNote(id: number, options?: any) {
        return DefaultApiFp(this.configuration).destroyVisitSetNote(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Healthz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthz(options?: any) {
        return DefaultApiFp(this.configuration).healthz(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public index(options?: any) {
        return DefaultApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Attachment
     * @param {number} [start] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAttachment(start?: number, perPage?: number, options?: any) {
        return DefaultApiFp(this.configuration).listAttachment(start, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Fits Meta
     * @param {number} visitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listFitsMeta(visitId: number, options?: any) {
        return DefaultApiFp(this.configuration).listFitsMeta(visitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Visit
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [sql] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVisit(offset?: number, limit?: number, sql?: string, options?: any) {
        return DefaultApiFp(this.configuration).listVisit(offset, limit, sql, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Visit Csv
     * @param {string} [sql] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVisitCsv(sql?: string, options?: any) {
        return DefaultApiFp(this.configuration).listVisitCsv(sql, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Agc Data Chart
     * @param {number} visitId 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {ThemeName} [theme] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showAgcDataChart(visitId: number, width?: number, height?: number, theme?: ThemeName, options?: any) {
        return DefaultApiFp(this.configuration).showAgcDataChart(visitId, width, height, theme, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Agc Fits Preview
     * @param {number} visitId 
     * @param {number} frameId 
     * @param {number} hduIndex 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showAgcFitsPreview(visitId: number, frameId: number, hduIndex: number, width?: number, height?: number, options?: any) {
        return DefaultApiFp(this.configuration).showAgcFitsPreview(visitId, frameId, hduIndex, width, height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Attachment
     * @param {string} accountName 
     * @param {number} fileId 
     * @param {string} [filename] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showAttachment(accountName: string, fileId: number, filename?: string, options?: any) {
        return DefaultApiFp(this.configuration).showAttachment(accountName, fileId, filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Fits By Frame Id
     * @param {number} visitId 
     * @param {string} frameId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showFitsByFrameId(visitId: number, frameId: string, options?: any) {
        return DefaultApiFp(this.configuration).showFitsByFrameId(visitId, frameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Mcs Data Chart
     * @param {number} frameId 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {ThemeName} [theme] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showMcsDataChart(frameId: number, width?: number, height?: number, theme?: ThemeName, options?: any) {
        return DefaultApiFp(this.configuration).showMcsDataChart(frameId, width, height, theme, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Mcs Fits
     * @param {number} visitId 
     * @param {string} frameId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showMcsFits(visitId: number, frameId: string, options?: any) {
        return DefaultApiFp(this.configuration).showMcsFits(visitId, frameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Mcs Fits Preview
     * @param {number} visitId 
     * @param {number} frameId 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showMcsFitsPreview(visitId: number, frameId: number, width?: number, height?: number, options?: any) {
        return DefaultApiFp(this.configuration).showMcsFitsPreview(visitId, frameId, width, height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSession(options?: any) {
        return DefaultApiFp(this.configuration).showSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Sps Fits
     * @param {number} visitId 
     * @param {number} cameraId 
     * @param {FitsType} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSpsFits(visitId: number, cameraId: number, type?: FitsType, options?: any) {
        return DefaultApiFp(this.configuration).showSpsFits(visitId, cameraId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Sps Fits Preview
     * @param {number} visitId 
     * @param {number} cameraId 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {FitsType} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSpsFitsPreview(visitId: number, cameraId: number, width?: number, height?: number, type?: FitsType, options?: any) {
        return DefaultApiFp(this.configuration).showSpsFitsPreview(visitId, cameraId, width, height, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Visit
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showVisit(id: number, options?: any) {
        return DefaultApiFp(this.configuration).showVisit(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Mcs Exposure Note
     * @param {number} id 
     * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMcsExposureNote(id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).updateMcsExposureNote(id, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Visit Note
     * @param {number} id 
     * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateVisitNote(id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).updateVisitNote(id, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Visit Set Note
     * @param {number} id 
     * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateVisitSetNote(id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).updateVisitSetNote(id, visitSetNoteUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


