/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateAttachmentResponse
 */
export interface CreateAttachmentResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateAttachmentResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAttachmentResponse
     */
    suffix: string;
}
/**
 * 
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * 
     * @type {number}
     * @memberof CurrentUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    account_name: string;
}
/**
 * 
 * @export
 * @interface FitsHdu
 */
export interface FitsHdu {
    /**
     * 
     * @type {number}
     * @memberof FitsHdu
     */
    index: number;
    /**
     * 
     * @type {FitsHeader}
     * @memberof FitsHdu
     */
    header: FitsHeader;
}
/**
 * 
 * @export
 * @interface FitsHeader
 */
export interface FitsHeader {
    /**
     * 
     * @type {Array<any>}
     * @memberof FitsHeader
     */
    cards: Array<any>;
}
/**
 * 
 * @export
 * @interface FitsMeta
 */
export interface FitsMeta {
    /**
     * 
     * @type {string}
     * @memberof FitsMeta
     */
    frameid: string;
    /**
     * 
     * @type {Array<FitsHdu>}
     * @memberof FitsMeta
     */
    hdul: Array<FitsHdu>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface McsExposure
 */
export interface McsExposure {
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    frame_id: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    exptime?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    altitude?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    azimuth?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    insrot?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    adc_pa?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_cover_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_m1_temperature?: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposure
     */
    taken_at: string;
    /**
     * 
     * @type {Array<McsExposureNote>}
     * @memberof McsExposure
     */
    notes: Array<McsExposureNote>;
}
/**
 * 
 * @export
 * @interface McsExposureNote
 */
export interface McsExposureNote {
    /**
     * 
     * @type {number}
     * @memberof McsExposureNote
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposureNote
     */
    body: string;
    /**
     * 
     * @type {ObslogUser}
     * @memberof McsExposureNote
     */
    user: ObslogUser;
}
/**
 * 
 * @export
 * @interface McsExposureNoteCreateRequest
 */
export interface McsExposureNoteCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof McsExposureNoteCreateRequest
     */
    mcs_exposure_frame_id: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposureNoteCreateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface McsExposureNoteCreateResponse
 */
export interface McsExposureNoteCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof McsExposureNoteCreateResponse
     */
    id: number;
}
/**
 * 
 * @export
 * @interface McsVisit
 */
export interface McsVisit {
    /**
     * 
     * @type {Array<McsExposure>}
     * @memberof McsVisit
     */
    exposures: Array<McsExposure>;
}
/**
 * 
 * @export
 * @interface ObslogUser
 */
export interface ObslogUser {
    /**
     * 
     * @type {number}
     * @memberof ObslogUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ObslogUser
     */
    account_name: string;
}
/**
 * 
 * @export
 * @interface PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest
 */
export interface PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest
 */
export interface PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {CurrentUser}
     * @memberof Session
     */
    current_user: CurrentUser;
}
/**
 * 
 * @export
 * @interface SessionCreateRequest
 */
export interface SessionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface SpsAnnotation
 */
export interface SpsAnnotation {
    /**
     * 
     * @type {number}
     * @memberof SpsAnnotation
     */
    data_flag: number;
    /**
     * 
     * @type {string}
     * @memberof SpsAnnotation
     */
    notes: string;
    /**
     * 
     * @type {number}
     * @memberof SpsAnnotation
     */
    annotation_id: number;
    /**
     * 
     * @type {string}
     * @memberof SpsAnnotation
     */
    created_at?: string;
}
/**
 * 
 * @export
 * @interface SpsExposure
 */
export interface SpsExposure {
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    camera_id: number;
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    exptime: number;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_start: string;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_end: string;
    /**
     * 
     * @type {Array<SpsAnnotation>}
     * @memberof SpsExposure
     */
    annotation: Array<SpsAnnotation>;
}
/**
 * 
 * @export
 * @interface SpsSequence
 */
export interface SpsSequence {
    /**
     * 
     * @type {number}
     * @memberof SpsSequence
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    sequence_type?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    cmd_str?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    status?: string;
    /**
     * 
     * @type {Array<VisitSetNote>}
     * @memberof SpsSequence
     */
    notes: Array<VisitSetNote>;
}
/**
 * 
 * @export
 * @interface SpsSequenceDetail
 */
export interface SpsSequenceDetail {
    /**
     * 
     * @type {number}
     * @memberof SpsSequenceDetail
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    sequence_type?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    cmd_str?: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequenceDetail
     */
    status?: string;
    /**
     * 
     * @type {Array<VisitSetNote>}
     * @memberof SpsSequenceDetail
     */
    notes: Array<VisitSetNote>;
}
/**
 * 
 * @export
 * @interface SpsVisit
 */
export interface SpsVisit {
    /**
     * 
     * @type {string}
     * @memberof SpsVisit
     */
    exp_type: string;
    /**
     * 
     * @type {Array<SpsExposure>}
     * @memberof SpsVisit
     */
    exposures: Array<SpsExposure>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * 
 * @export
 * @interface VisitDetail
 */
export interface VisitDetail {
    /**
     * 
     * @type {number}
     * @memberof VisitDetail
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitDetail
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitDetail
     */
    issued_at?: string;
    /**
     * 
     * @type {Array<VisitNote>}
     * @memberof VisitDetail
     */
    notes: Array<VisitNote>;
    /**
     * 
     * @type {SpsVisit}
     * @memberof VisitDetail
     */
    sps?: SpsVisit;
    /**
     * 
     * @type {McsVisit}
     * @memberof VisitDetail
     */
    mcs?: McsVisit;
    /**
     * 
     * @type {SpsSequenceDetail}
     * @memberof VisitDetail
     */
    sps_sequence?: SpsSequenceDetail;
}
/**
 * 
 * @export
 * @interface VisitList
 */
export interface VisitList {
    /**
     * 
     * @type {Array<VisitListEntry>}
     * @memberof VisitList
     */
    visits: Array<VisitListEntry>;
    /**
     * 
     * @type {Array<VisitSet>}
     * @memberof VisitList
     */
    visit_sets: Array<VisitSet>;
    /**
     * 
     * @type {number}
     * @memberof VisitList
     */
    count: number;
}
/**
 * 
 * @export
 * @interface VisitListEntry
 */
export interface VisitListEntry {
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitListEntry
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitListEntry
     */
    issued_at?: string;
    /**
     * 
     * @type {number}
     * @memberof VisitListEntry
     */
    visit_set_id?: number;
}
/**
 * 
 * @export
 * @interface VisitNote
 */
export interface VisitNote {
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    user_id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    pfs_visit_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitNote
     */
    body: string;
    /**
     * 
     * @type {ObslogUser}
     * @memberof VisitNote
     */
    user: ObslogUser;
}
/**
 * 
 * @export
 * @interface VisitNoteCreateRequest
 */
export interface VisitNoteCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof VisitNoteCreateRequest
     */
    visit_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitNoteCreateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface VisitNoteCreateResponse
 */
export interface VisitNoteCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof VisitNoteCreateResponse
     */
    id: number;
}
/**
 * 
 * @export
 * @interface VisitSet
 */
export interface VisitSet {
    /**
     * 
     * @type {number}
     * @memberof VisitSet
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitSet
     */
    visit_id: number;
    /**
     * 
     * @type {SpsSequence}
     * @memberof VisitSet
     */
    sps_sequence: SpsSequence;
}
/**
 * 
 * @export
 * @interface VisitSetNote
 */
export interface VisitSetNote {
    /**
     * 
     * @type {number}
     * @memberof VisitSetNote
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitSetNote
     */
    user_id: number;
    /**
     * 
     * @type {number}
     * @memberof VisitSetNote
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitSetNote
     */
    body: string;
    /**
     * 
     * @type {ObslogUser}
     * @memberof VisitSetNote
     */
    user: ObslogUser;
}
/**
 * 
 * @export
 * @interface VisitSetNoteCreateRequest
 */
export interface VisitSetNoteCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof VisitSetNoteCreateRequest
     */
    visit_set_id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitSetNoteCreateRequest
     */
    body: string;
}
/**
 * 
 * @export
 * @interface VisitSetNoteCreateResponse
 */
export interface VisitSetNoteCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof VisitSetNoteCreateResponse
     */
    id: number;
}
/**
 * 
 * @export
 * @interface VisitSetNoteUpdateRequest
 */
export interface VisitSetNoteUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof VisitSetNoteUpdateRequest
     */
    body: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Attachment
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachment: async (file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createAttachment', 'file', file)
            const localVarPath = `/api/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fits Download
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fitsDownload: async (visitId: number, cameraId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('fitsDownload', 'visitId', visitId)
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('fitsDownload', 'cameraId', cameraId)
            const localVarPath = `/api/fits_download/{visit_id}/{camera_id}`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fits Preview
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fitsPreview: async (visitId: number, cameraId: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('fitsPreview', 'visitId', visitId)
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('fitsPreview', 'cameraId', cameraId)
            const localVarPath = `/api/fits_preview/{visit_id}/{camera_id}`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mcs Data Chart
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsDataChart: async (frameId: number, width?: number, height?: number, theme?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameId' is not null or undefined
            assertParamExists('mcsDataChart', 'frameId', frameId)
            const localVarPath = `/api/mcs_data_chart/{frame_id}`
                .replace(`{${"frame_id"}}`, encodeURIComponent(String(frameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mcs Exposure Note Create
         * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsExposureNoteCreate: async (mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mcsExposureNoteCreateRequest' is not null or undefined
            assertParamExists('mcsExposureNoteCreate', 'mcsExposureNoteCreateRequest', mcsExposureNoteCreateRequest)
            const localVarPath = `/api/mcs_exposures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mcsExposureNoteCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mcs Exposure Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsExposureNoteDestroy: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mcsExposureNoteDestroy', 'id', id)
            const localVarPath = `/api/mcs_exposures/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mcs Exposure Note Update
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsExposureNoteUpdate: async (id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mcsExposureNoteUpdate', 'id', id)
            // verify required parameter 'pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest' is not null or undefined
            assertParamExists('mcsExposureNoteUpdate', 'pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest', pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest)
            const localVarPath = `/api/mcs_exposures/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate: async (sessionCreateRequest: SessionCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionCreateRequest' is not null or undefined
            assertParamExists('sessionCreate', 'sessionCreateRequest', sessionCreateRequest)
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDestroy: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionShow: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitDetail: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visitDetail', 'id', id)
            const localVarPath = `/api/visits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Fits
         * @param {number} visitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitFits: async (visitId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('visitFits', 'visitId', visitId)
            const localVarPath = `/api/fits/{visit_id}`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit List
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitList: async (offset?: number, limit?: number, sql?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/visits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sql !== undefined) {
                localVarQueryParameter['sql'] = sql;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Note Create
         * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitNoteCreate: async (visitNoteCreateRequest: VisitNoteCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitNoteCreateRequest' is not null or undefined
            assertParamExists('visitNoteCreate', 'visitNoteCreateRequest', visitNoteCreateRequest)
            const localVarPath = `/api/visit_notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitNoteCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitNoteDestroy: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visitNoteDestroy', 'id', id)
            const localVarPath = `/api/visit_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Note Update
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitNoteUpdate: async (id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visitNoteUpdate', 'id', id)
            // verify required parameter 'pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest' is not null or undefined
            assertParamExists('visitNoteUpdate', 'pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest', pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest)
            const localVarPath = `/api/visit_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Set Note Create
         * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitSetNoteCreate: async (visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitSetNoteCreateRequest' is not null or undefined
            assertParamExists('visitSetNoteCreate', 'visitSetNoteCreateRequest', visitSetNoteCreateRequest)
            const localVarPath = `/api/visit_set_notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitSetNoteCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Set Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitSetNoteDestroy: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visitSetNoteDestroy', 'id', id)
            const localVarPath = `/api/visit_set_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit Set Note Update
         * @param {number} id 
         * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitSetNoteUpdate: async (id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visitSetNoteUpdate', 'id', id)
            // verify required parameter 'visitSetNoteUpdateRequest' is not null or undefined
            assertParamExists('visitSetNoteUpdate', 'visitSetNoteUpdateRequest', visitSetNoteUpdateRequest)
            const localVarPath = `/api/visit_set_notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitSetNoteUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Attachment
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttachment(file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAttachmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttachment(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fits Download
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fitsDownload(visitId: number, cameraId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fitsDownload(visitId, cameraId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fits Preview
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fitsPreview(visitId: number, cameraId: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fitsPreview(visitId, cameraId, width, height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mcs Data Chart
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mcsDataChart(frameId: number, width?: number, height?: number, theme?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mcsDataChart(frameId, width, height, theme, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mcs Exposure Note Create
         * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mcsExposureNoteCreate(mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<McsExposureNoteCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mcsExposureNoteCreate(mcsExposureNoteCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mcs Exposure Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mcsExposureNoteDestroy(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mcsExposureNoteDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mcs Exposure Note Update
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mcsExposureNoteUpdate(id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mcsExposureNoteUpdate(id, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionCreate(sessionCreateRequest: SessionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionCreate(sessionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Session Destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionDestroy(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionDestroy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Session Show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionShow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionShow(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitDetail(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitDetail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Fits
         * @param {number} visitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitFits(visitId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FitsMeta>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitFits(visitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit List
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitList(offset?: number, limit?: number, sql?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitList(offset, limit, sql, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Note Create
         * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitNoteCreate(visitNoteCreateRequest: VisitNoteCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitNoteCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitNoteCreate(visitNoteCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitNoteDestroy(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitNoteDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Note Update
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitNoteUpdate(id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitNoteUpdate(id, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Set Note Create
         * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitSetNoteCreate(visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitSetNoteCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitSetNoteCreate(visitSetNoteCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Set Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitSetNoteDestroy(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitSetNoteDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Visit Set Note Update
         * @param {number} id 
         * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitSetNoteUpdate(id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visitSetNoteUpdate(id, visitSetNoteUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Attachment
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachment(file: any, options?: any): AxiosPromise<CreateAttachmentResponse> {
            return localVarFp.createAttachment(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fits Download
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fitsDownload(visitId: number, cameraId: number, options?: any): AxiosPromise<any> {
            return localVarFp.fitsDownload(visitId, cameraId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fits Preview
         * @param {number} visitId 
         * @param {number} cameraId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fitsPreview(visitId: number, cameraId: number, width?: number, height?: number, options?: any): AxiosPromise<any> {
            return localVarFp.fitsPreview(visitId, cameraId, width, height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<any> {
            return localVarFp.index(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mcs Data Chart
         * @param {number} frameId 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsDataChart(frameId: number, width?: number, height?: number, theme?: string, options?: any): AxiosPromise<any> {
            return localVarFp.mcsDataChart(frameId, width, height, theme, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mcs Exposure Note Create
         * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsExposureNoteCreate(mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options?: any): AxiosPromise<McsExposureNoteCreateResponse> {
            return localVarFp.mcsExposureNoteCreate(mcsExposureNoteCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mcs Exposure Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsExposureNoteDestroy(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.mcsExposureNoteDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mcs Exposure Note Update
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mcsExposureNoteUpdate(id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.mcsExposureNoteUpdate(id, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate(sessionCreateRequest: SessionCreateRequest, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionCreate(sessionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDestroy(options?: any): AxiosPromise<any> {
            return localVarFp.sessionDestroy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionShow(options?: any): AxiosPromise<Session> {
            return localVarFp.sessionShow(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitDetail(id: number, options?: any): AxiosPromise<VisitDetail> {
            return localVarFp.visitDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Fits
         * @param {number} visitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitFits(visitId: number, options?: any): AxiosPromise<Array<FitsMeta>> {
            return localVarFp.visitFits(visitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit List
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [sql] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitList(offset?: number, limit?: number, sql?: string, options?: any): AxiosPromise<VisitList> {
            return localVarFp.visitList(offset, limit, sql, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Note Create
         * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitNoteCreate(visitNoteCreateRequest: VisitNoteCreateRequest, options?: any): AxiosPromise<VisitNoteCreateResponse> {
            return localVarFp.visitNoteCreate(visitNoteCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitNoteDestroy(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.visitNoteDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Note Update
         * @param {number} id 
         * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitNoteUpdate(id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.visitNoteUpdate(id, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Set Note Create
         * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitSetNoteCreate(visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options?: any): AxiosPromise<VisitSetNoteCreateResponse> {
            return localVarFp.visitSetNoteCreate(visitSetNoteCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Set Note Destroy
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitSetNoteDestroy(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.visitSetNoteDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit Set Note Update
         * @param {number} id 
         * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitSetNoteUpdate(id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.visitSetNoteUpdate(id, visitSetNoteUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Attachment
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAttachment(file: any, options?: any) {
        return DefaultApiFp(this.configuration).createAttachment(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fits Download
     * @param {number} visitId 
     * @param {number} cameraId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fitsDownload(visitId: number, cameraId: number, options?: any) {
        return DefaultApiFp(this.configuration).fitsDownload(visitId, cameraId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fits Preview
     * @param {number} visitId 
     * @param {number} cameraId 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fitsPreview(visitId: number, cameraId: number, width?: number, height?: number, options?: any) {
        return DefaultApiFp(this.configuration).fitsPreview(visitId, cameraId, width, height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public index(options?: any) {
        return DefaultApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mcs Data Chart
     * @param {number} frameId 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {string} [theme] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mcsDataChart(frameId: number, width?: number, height?: number, theme?: string, options?: any) {
        return DefaultApiFp(this.configuration).mcsDataChart(frameId, width, height, theme, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mcs Exposure Note Create
     * @param {McsExposureNoteCreateRequest} mcsExposureNoteCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mcsExposureNoteCreate(mcsExposureNoteCreateRequest: McsExposureNoteCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).mcsExposureNoteCreate(mcsExposureNoteCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mcs Exposure Note Destroy
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mcsExposureNoteDestroy(id: number, options?: any) {
        return DefaultApiFp(this.configuration).mcsExposureNoteDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mcs Exposure Note Update
     * @param {number} id 
     * @param {PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mcsExposureNoteUpdate(id: number, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).mcsExposureNoteUpdate(id, pfsObslogServerAppRoutersMcsExposureNoteVisitNoteUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Create
     * @param {SessionCreateRequest} sessionCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionCreate(sessionCreateRequest: SessionCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).sessionCreate(sessionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Destroy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionDestroy(options?: any) {
        return DefaultApiFp(this.configuration).sessionDestroy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Show
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionShow(options?: any) {
        return DefaultApiFp(this.configuration).sessionShow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Detail
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitDetail(id: number, options?: any) {
        return DefaultApiFp(this.configuration).visitDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Fits
     * @param {number} visitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitFits(visitId: number, options?: any) {
        return DefaultApiFp(this.configuration).visitFits(visitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit List
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [sql] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitList(offset?: number, limit?: number, sql?: string, options?: any) {
        return DefaultApiFp(this.configuration).visitList(offset, limit, sql, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Note Create
     * @param {VisitNoteCreateRequest} visitNoteCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitNoteCreate(visitNoteCreateRequest: VisitNoteCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).visitNoteCreate(visitNoteCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Note Destroy
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitNoteDestroy(id: number, options?: any) {
        return DefaultApiFp(this.configuration).visitNoteDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Note Update
     * @param {number} id 
     * @param {PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest} pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitNoteUpdate(id: number, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest: PfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).visitNoteUpdate(id, pfsObslogServerAppRoutersVisitNoteVisitNoteUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Set Note Create
     * @param {VisitSetNoteCreateRequest} visitSetNoteCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitSetNoteCreate(visitSetNoteCreateRequest: VisitSetNoteCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).visitSetNoteCreate(visitSetNoteCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Set Note Destroy
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitSetNoteDestroy(id: number, options?: any) {
        return DefaultApiFp(this.configuration).visitSetNoteDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Visit Set Note Update
     * @param {number} id 
     * @param {VisitSetNoteUpdateRequest} visitSetNoteUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visitSetNoteUpdate(id: number, visitSetNoteUpdateRequest: VisitSetNoteUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).visitSetNoteUpdate(id, visitSetNoteUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


