/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface IndexVisitSetResponse
 */
export interface IndexVisitSetResponse {
    /**
     * 
     * @type {Array<VisitSet>}
     * @memberof IndexVisitSetResponse
     */
    visit_sets: Array<VisitSet>;
}
/**
 * 
 * @export
 * @interface McsExposure
 */
export interface McsExposure {
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    frame_id: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    exptime?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    altitude?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    azimuth?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    insrot?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    adc_pa?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    dome_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_pressure?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    outside_humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_cover_temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof McsExposure
     */
    mcs_m1_temperature?: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposure
     */
    taken_at: string;
    /**
     * 
     * @type {Array<McsExposureNote>}
     * @memberof McsExposure
     */
    notes: Array<McsExposureNote>;
}
/**
 * 
 * @export
 * @interface McsExposureNote
 */
export interface McsExposureNote {
    /**
     * 
     * @type {number}
     * @memberof McsExposureNote
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof McsExposureNote
     */
    body: string;
    /**
     * 
     * @type {PfsobslogRoutersQueryUser}
     * @memberof McsExposureNote
     */
    user?: PfsobslogRoutersQueryUser;
}
/**
 * 
 * @export
 * @interface McsExposureNoteCreate
 */
export interface McsExposureNoteCreate {
    /**
     * 
     * @type {string}
     * @memberof McsExposureNoteCreate
     */
    body: string;
}
/**
 * 
 * @export
 * @interface PfsobslogRoutersQueryUser
 */
export interface PfsobslogRoutersQueryUser {
    /**
     * 
     * @type {number}
     * @memberof PfsobslogRoutersQueryUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PfsobslogRoutersQueryUser
     */
    name: string;
}
/**
 * 
 * @export
 * @interface PfsobslogRoutersSessionUser
 */
export interface PfsobslogRoutersSessionUser {
    /**
     * 
     * @type {number}
     * @memberof PfsobslogRoutersSessionUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PfsobslogRoutersSessionUser
     */
    email: string;
}
/**
 * 
 * @export
 * @interface SessionCreateRequest
 */
export interface SessionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface SessionCreateResponse
 */
export interface SessionCreateResponse {
    /**
     * 
     * @type {PfsobslogRoutersSessionUser}
     * @memberof SessionCreateResponse
     */
    current_user: PfsobslogRoutersSessionUser;
    /**
     * 
     * @type {string}
     * @memberof SessionCreateResponse
     */
    last_day: string;
}
/**
 * 
 * @export
 * @interface SpsExposure
 */
export interface SpsExposure {
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    camera_id: number;
    /**
     * 
     * @type {number}
     * @memberof SpsExposure
     */
    exptime: number;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_start: string;
    /**
     * 
     * @type {string}
     * @memberof SpsExposure
     */
    exp_end: string;
}
/**
 * 
 * @export
 * @interface SpsSequence
 */
export interface SpsSequence {
    /**
     * 
     * @type {number}
     * @memberof SpsSequence
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    sequence_type: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    comments: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    cmd_str: string;
    /**
     * 
     * @type {string}
     * @memberof SpsSequence
     */
    status: string;
    /**
     * 
     * @type {Array<VisitSetNote>}
     * @memberof SpsSequence
     */
    notes: Array<VisitSetNote>;
}
/**
 * 
 * @export
 * @interface SpsVisit
 */
export interface SpsVisit {
    /**
     * 
     * @type {string}
     * @memberof SpsVisit
     */
    exp_type: string;
    /**
     * 
     * @type {Array<SpsExposure>}
     * @memberof SpsVisit
     */
    exposures: Array<SpsExposure>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * 
 * @export
 * @interface Visit
 */
export interface Visit {
    /**
     * 
     * @type {number}
     * @memberof Visit
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Visit
     */
    description?: string;
    /**
     * 
     * @type {SpsVisit}
     * @memberof Visit
     */
    sps_visit?: SpsVisit;
    /**
     * 
     * @type {Array<McsExposure>}
     * @memberof Visit
     */
    mcs_exposures: Array<McsExposure>;
    /**
     * 
     * @type {Array<VisitNote>}
     * @memberof Visit
     */
    notes: Array<VisitNote>;
}
/**
 * 
 * @export
 * @interface VisitNote
 */
export interface VisitNote {
    /**
     * 
     * @type {number}
     * @memberof VisitNote
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitNote
     */
    body: string;
    /**
     * 
     * @type {PfsobslogRoutersQueryUser}
     * @memberof VisitNote
     */
    user?: PfsobslogRoutersQueryUser;
}
/**
 * 
 * @export
 * @interface VisitNoteCreate
 */
export interface VisitNoteCreate {
    /**
     * 
     * @type {string}
     * @memberof VisitNoteCreate
     */
    body: string;
}
/**
 * set of visit. represents sps_sequence entity for sps_visits
 * @export
 * @interface VisitSet
 */
export interface VisitSet {
    /**
     * 
     * @type {number}
     * @memberof VisitSet
     */
    id: number;
    /**
     * 
     * @type {SpsSequence}
     * @memberof VisitSet
     */
    sps_sequence?: SpsSequence;
    /**
     * 
     * @type {Array<Visit>}
     * @memberof VisitSet
     */
    visits: Array<Visit>;
}
/**
 * 
 * @export
 * @interface VisitSetNote
 */
export interface VisitSetNote {
    /**
     * 
     * @type {number}
     * @memberof VisitSetNote
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VisitSetNote
     */
    body: string;
    /**
     * 
     * @type {PfsobslogRoutersQueryUser}
     * @memberof VisitSetNote
     */
    user?: PfsobslogRoutersQueryUser;
}
/**
 * 
 * @export
 * @interface VisitSetNoteCreate
 */
export interface VisitSetNoteCreate {
    /**
     * 
     * @type {string}
     * @memberof VisitSetNoteCreate
     */
    body: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Mcs Exposure Note
         * @param {number} mcsExposureId 
         * @param {McsExposureNoteCreate} mcsExposureNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMcsExposureNote: async (mcsExposureId: number, mcsExposureNoteCreate: McsExposureNoteCreate, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mcsExposureId' is not null or undefined
            if (mcsExposureId === null || mcsExposureId === undefined) {
                throw new RequiredError('mcsExposureId','Required parameter mcsExposureId was null or undefined when calling createMcsExposureNote.');
            }
            // verify required parameter 'mcsExposureNoteCreate' is not null or undefined
            if (mcsExposureNoteCreate === null || mcsExposureNoteCreate === undefined) {
                throw new RequiredError('mcsExposureNoteCreate','Required parameter mcsExposureNoteCreate was null or undefined when calling createMcsExposureNote.');
            }
            const localVarPath = `/api/mcs_exposure/{mcs_exposure_id}/notes`
                .replace(`{${"mcs_exposure_id"}}`, encodeURIComponent(String(mcsExposureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mcsExposureNoteCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(mcsExposureNoteCreate !== undefined ? mcsExposureNoteCreate : {}) : (mcsExposureNoteCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Visit Note
         * @param {number} visitId 
         * @param {VisitNoteCreate} visitNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitNote: async (visitId: number, visitNoteCreate: VisitNoteCreate, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            if (visitId === null || visitId === undefined) {
                throw new RequiredError('visitId','Required parameter visitId was null or undefined when calling createVisitNote.');
            }
            // verify required parameter 'visitNoteCreate' is not null or undefined
            if (visitNoteCreate === null || visitNoteCreate === undefined) {
                throw new RequiredError('visitNoteCreate','Required parameter visitNoteCreate was null or undefined when calling createVisitNote.');
            }
            const localVarPath = `/api/{visit_id}/notes`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof visitNoteCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(visitNoteCreate !== undefined ? visitNoteCreate : {}) : (visitNoteCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Visit Set Note
         * @param {number} visitSetId 
         * @param {VisitSetNoteCreate} visitSetNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitSetNote: async (visitSetId: number, visitSetNoteCreate: VisitSetNoteCreate, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitSetId' is not null or undefined
            if (visitSetId === null || visitSetId === undefined) {
                throw new RequiredError('visitSetId','Required parameter visitSetId was null or undefined when calling createVisitSetNote.');
            }
            // verify required parameter 'visitSetNoteCreate' is not null or undefined
            if (visitSetNoteCreate === null || visitSetNoteCreate === undefined) {
                throw new RequiredError('visitSetNoteCreate','Required parameter visitSetNoteCreate was null or undefined when calling createVisitSetNote.');
            }
            const localVarPath = `/api/visit_sets/{visit_set_id}/notes`
                .replace(`{${"visit_set_id"}}`, encodeURIComponent(String(visitSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof visitSetNoteCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(visitSetNoteCreate !== undefined ? visitSetNoteCreate : {}) : (visitSetNoteCreate || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Mcs Exposure Note
         * @param {number} mcsExposureId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMcsExposureNote: async (mcsExposureId: number, noteId: number, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mcsExposureId' is not null or undefined
            if (mcsExposureId === null || mcsExposureId === undefined) {
                throw new RequiredError('mcsExposureId','Required parameter mcsExposureId was null or undefined when calling deleteMcsExposureNote.');
            }
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling deleteMcsExposureNote.');
            }
            const localVarPath = `/api/mcs_exposure/{mcs_exposure_id}/notes/{note_id}`
                .replace(`{${"mcs_exposure_id"}}`, encodeURIComponent(String(mcsExposureId)))
                .replace(`{${"note_id"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Visit Note
         * @param {number} visitId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisitNote: async (visitId: number, noteId: number, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            if (visitId === null || visitId === undefined) {
                throw new RequiredError('visitId','Required parameter visitId was null or undefined when calling deleteVisitNote.');
            }
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling deleteVisitNote.');
            }
            const localVarPath = `/api/{visit_id}/notes/{note_id}`
                .replace(`{${"visit_id"}}`, encodeURIComponent(String(visitId)))
                .replace(`{${"note_id"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Visit Set Note
         * @param {number} visitSetId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisitSetNote: async (visitSetId: number, noteId: number, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitSetId' is not null or undefined
            if (visitSetId === null || visitSetId === undefined) {
                throw new RequiredError('visitSetId','Required parameter visitSetId was null or undefined when calling deleteVisitSetNote.');
            }
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling deleteVisitSetNote.');
            }
            const localVarPath = `/api/visit_sets/{visit_set_id}/notes/{note_id}`
                .replace(`{${"visit_set_id"}}`, encodeURIComponent(String(visitSetId)))
                .replace(`{${"note_id"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index Visit Sets
         * @param {string} [dateStart] 
         * @param {string} [dateEnd] 
         * @param {boolean} [includeSps] 
         * @param {boolean} [includeMcs] 
         * @param {number} [page] 
         * @param {string} [sql] 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexVisitSets: async (dateStart?: string, dateEnd?: string, includeSps?: boolean, includeMcs?: boolean, page?: number, sql?: string, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/visit_sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString().substr(0,10) :
                    dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString().substr(0,10) :
                    dateEnd;
            }

            if (includeSps !== undefined) {
                localVarQueryParameter['include_sps'] = includeSps;
            }

            if (includeMcs !== undefined) {
                localVarQueryParameter['include_mcs'] = includeMcs;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sql !== undefined) {
                localVarQueryParameter['sql'] = sql;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate: async (sessionCreateRequest: SessionCreateRequest, fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionCreateRequest' is not null or undefined
            if (sessionCreateRequest === null || sessionCreateRequest === undefined) {
                throw new RequiredError('sessionCreateRequest','Required parameter sessionCreateRequest was null or undefined when calling sessionCreate.');
            }
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof sessionCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sessionCreateRequest !== undefined ? sessionCreateRequest : {}) : (sessionCreateRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Delete
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDelete: async (fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Read
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionRead: async (fASTAPISESSION?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sleep
         * @param {number} [duration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sleep: async (duration?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sleep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Mcs Exposure Note
         * @param {number} mcsExposureId 
         * @param {McsExposureNoteCreate} mcsExposureNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMcsExposureNote(mcsExposureId: number, mcsExposureNoteCreate: McsExposureNoteCreate, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createMcsExposureNote(mcsExposureId, mcsExposureNoteCreate, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Visit Note
         * @param {number} visitId 
         * @param {VisitNoteCreate} visitNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVisitNote(visitId: number, visitNoteCreate: VisitNoteCreate, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createVisitNote(visitId, visitNoteCreate, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Visit Set Note
         * @param {number} visitSetId 
         * @param {VisitSetNoteCreate} visitSetNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVisitSetNote(visitSetId: number, visitSetNoteCreate: VisitSetNoteCreate, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createVisitSetNote(visitSetId, visitSetNoteCreate, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Mcs Exposure Note
         * @param {number} mcsExposureId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMcsExposureNote(mcsExposureId: number, noteId: number, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMcsExposureNote(mcsExposureId, noteId, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Visit Note
         * @param {number} visitId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVisitNote(visitId: number, noteId: number, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteVisitNote(visitId, noteId, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Visit Set Note
         * @param {number} visitSetId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVisitSetNote(visitSetId: number, noteId: number, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteVisitSetNote(visitSetId, noteId, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).index(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Index Visit Sets
         * @param {string} [dateStart] 
         * @param {string} [dateEnd] 
         * @param {boolean} [includeSps] 
         * @param {boolean} [includeMcs] 
         * @param {number} [page] 
         * @param {string} [sql] 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexVisitSets(dateStart?: string, dateEnd?: string, includeSps?: boolean, includeMcs?: boolean, page?: number, sql?: string, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexVisitSetResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).indexVisitSets(dateStart, dateEnd, includeSps, includeMcs, page, sql, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionCreate(sessionCreateRequest: SessionCreateRequest, fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionCreateResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sessionCreate(sessionCreateRequest, fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Session Delete
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionDelete(fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sessionDelete(fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Session Read
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionRead(fASTAPISESSION?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionCreateResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sessionRead(fASTAPISESSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sleep
         * @param {number} [duration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sleep(duration?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sleep(duration, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Mcs Exposure Note
         * @param {number} mcsExposureId 
         * @param {McsExposureNoteCreate} mcsExposureNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMcsExposureNote(mcsExposureId: number, mcsExposureNoteCreate: McsExposureNoteCreate, fASTAPISESSION?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).createMcsExposureNote(mcsExposureId, mcsExposureNoteCreate, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Visit Note
         * @param {number} visitId 
         * @param {VisitNoteCreate} visitNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitNote(visitId: number, visitNoteCreate: VisitNoteCreate, fASTAPISESSION?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).createVisitNote(visitId, visitNoteCreate, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Visit Set Note
         * @param {number} visitSetId 
         * @param {VisitSetNoteCreate} visitSetNoteCreate 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitSetNote(visitSetId: number, visitSetNoteCreate: VisitSetNoteCreate, fASTAPISESSION?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).createVisitSetNote(visitSetId, visitSetNoteCreate, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Mcs Exposure Note
         * @param {number} mcsExposureId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMcsExposureNote(mcsExposureId: number, noteId: number, fASTAPISESSION?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).deleteMcsExposureNote(mcsExposureId, noteId, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Visit Note
         * @param {number} visitId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisitNote(visitId: number, noteId: number, fASTAPISESSION?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).deleteVisitNote(visitId, noteId, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Visit Set Note
         * @param {number} visitSetId 
         * @param {number} noteId 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisitSetNote(visitSetId: number, noteId: number, fASTAPISESSION?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).deleteVisitSetNote(visitSetId, noteId, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).index(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index Visit Sets
         * @param {string} [dateStart] 
         * @param {string} [dateEnd] 
         * @param {boolean} [includeSps] 
         * @param {boolean} [includeMcs] 
         * @param {number} [page] 
         * @param {string} [sql] 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexVisitSets(dateStart?: string, dateEnd?: string, includeSps?: boolean, includeMcs?: boolean, page?: number, sql?: string, fASTAPISESSION?: string, options?: any): AxiosPromise<IndexVisitSetResponse> {
            return DefaultApiFp(configuration).indexVisitSets(dateStart, dateEnd, includeSps, includeMcs, page, sql, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Create
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate(sessionCreateRequest: SessionCreateRequest, fASTAPISESSION?: string, options?: any): AxiosPromise<SessionCreateResponse> {
            return DefaultApiFp(configuration).sessionCreate(sessionCreateRequest, fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Delete
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDelete(fASTAPISESSION?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).sessionDelete(fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Read
         * @param {string} [fASTAPISESSION] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionRead(fASTAPISESSION?: string, options?: any): AxiosPromise<SessionCreateResponse> {
            return DefaultApiFp(configuration).sessionRead(fASTAPISESSION, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sleep
         * @param {number} [duration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sleep(duration?: number, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).sleep(duration, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Mcs Exposure Note
     * @param {number} mcsExposureId 
     * @param {McsExposureNoteCreate} mcsExposureNoteCreate 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMcsExposureNote(mcsExposureId: number, mcsExposureNoteCreate: McsExposureNoteCreate, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).createMcsExposureNote(mcsExposureId, mcsExposureNoteCreate, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Visit Note
     * @param {number} visitId 
     * @param {VisitNoteCreate} visitNoteCreate 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVisitNote(visitId: number, visitNoteCreate: VisitNoteCreate, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).createVisitNote(visitId, visitNoteCreate, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Visit Set Note
     * @param {number} visitSetId 
     * @param {VisitSetNoteCreate} visitSetNoteCreate 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVisitSetNote(visitSetId: number, visitSetNoteCreate: VisitSetNoteCreate, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).createVisitSetNote(visitSetId, visitSetNoteCreate, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Mcs Exposure Note
     * @param {number} mcsExposureId 
     * @param {number} noteId 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMcsExposureNote(mcsExposureId: number, noteId: number, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteMcsExposureNote(mcsExposureId, noteId, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Visit Note
     * @param {number} visitId 
     * @param {number} noteId 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVisitNote(visitId: number, noteId: number, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteVisitNote(visitId, noteId, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Visit Set Note
     * @param {number} visitSetId 
     * @param {number} noteId 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVisitSetNote(visitSetId: number, noteId: number, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteVisitSetNote(visitSetId, noteId, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public index(options?: any) {
        return DefaultApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index Visit Sets
     * @param {string} [dateStart] 
     * @param {string} [dateEnd] 
     * @param {boolean} [includeSps] 
     * @param {boolean} [includeMcs] 
     * @param {number} [page] 
     * @param {string} [sql] 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public indexVisitSets(dateStart?: string, dateEnd?: string, includeSps?: boolean, includeMcs?: boolean, page?: number, sql?: string, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).indexVisitSets(dateStart, dateEnd, includeSps, includeMcs, page, sql, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Create
     * @param {SessionCreateRequest} sessionCreateRequest 
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionCreate(sessionCreateRequest: SessionCreateRequest, fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).sessionCreate(sessionCreateRequest, fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Delete
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionDelete(fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).sessionDelete(fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Read
     * @param {string} [fASTAPISESSION] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionRead(fASTAPISESSION?: string, options?: any) {
        return DefaultApiFp(this.configuration).sessionRead(fASTAPISESSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sleep
     * @param {number} [duration] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sleep(duration?: number, options?: any) {
        return DefaultApiFp(this.configuration).sleep(duration, options).then((request) => request(this.axios, this.basePath));
    }
}


